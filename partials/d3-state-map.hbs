<script>
var aspect = 960 / 500;
var el = d3.select('#map');
var width = el.node().getBoundingClientRect().width;
var height = width / aspect;

var projection = d3.geo.albersUsa()
    .scale(width)
    .translate([width / 2, height / 2]);

var path = d3.geo.path()
    .projection(projection);

var svg = el.append("svg")
    .attr("width", width)
    .attr("height", height);

d3.json('/data/us.json', function(error, us) {
  if (error) throw error;

  svg.insert('path', '.graticule')
      .datum(topojson.feature(us, us.objects.land))
      .attr('class', 'land')
      .attr('d', path);

  svg.insert('path', '.graticule')
      .datum(topojson.mesh(us, us.objects.states, function(a, b) { return a !== b; }))
      .attr('class', 'state-boundary')
      .attr('d', path);

    var scale = 1;

    d3.csv('/data/shootings.csv', function (error, csv) {
        svg.selectAll("circle")
            .data(csv)
            .enter()
            .append("circle")
    		.attr("cx", function (d) { return projection([d.lng, d.lat])[0]; })
    		.attr("cy", function (d) { return projection([d.lng, d.lat])[1]; })
            .attr("r",  "5px")
    		.attr("class", "dot")
            .attr("r",  function(d) { return +d.victims * scale; })
            .on("click", function(d) {
                console.log(d);
            });
    });

    d3.select(window)
        .on("resize", _.debounce(resize, 500));

    function resize() {
        var width = el.node().getBoundingClientRect().width;
        var height = width / aspect;

        svg
            .attr('width', width)
            .attr('height', height);

        projection
            .scale(width)
            .translate([width / 2, height / 2]);

        d3.select('.state-boundary')
            .attr('d', path);

        d3.selectAll('.land')
            .attr('d', path);
    }
});
</script>
